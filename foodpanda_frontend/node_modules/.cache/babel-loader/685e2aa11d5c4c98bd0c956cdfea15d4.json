{"ast":null,"code":"var _jsxFileName = \"D:\\\\facultate\\\\an 3\\\\sem 2 - UPM\\\\SD - UTCN\\\\assignments\\\\assignment2\\\\foodpanda_frontend\\\\src\\\\components\\\\LogInAdminPage.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport \"./../css/LogInAdminPage.css\";\nimport Popup from \"./Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LogInAdminPage = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [popup, setPopup] = useState({\n    active: false,\n    title: \"\",\n    message: \"\"\n  });\n  const navigate = useNavigate();\n\n  const validateInputSignUp = async () => {\n    if (!username) {\n      setPopup({\n        active: true,\n        title: \"Oops!\",\n        message: \"Username can't be empty\"\n      });\n      return false;\n    }\n\n    if (!password) {\n      setPopup({\n        active: true,\n        title: \"Oops!\",\n        message: \"Password can't be empty\"\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const loginAdmin = async admin => {\n    const response = await fetch(`http://localhost:8080/foodpanda/admin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(admin)\n    });\n    const data = await response.json();\n\n    if (data.success === true) {\n      console.log(username);\n      const receivedAdmin = await fetch(`http://localhost:8080/foodpanda/admins/${username}`);\n      const adminData = await receivedAdmin.json();\n\n      if (adminData.restaurantName === \"\") {\n        const receivedZones = await fetch(`http://localhost:8080/foodpanda/zones`);\n        const zonesData = await receivedZones.json();\n        navigate('/admin/restaurant', {\n          state: {\n            admin: adminData,\n            zones: zonesData\n          }\n        });\n      } else {\n        navigate('/admin/main-page', {\n          state: {\n            admin: adminData\n          }\n        });\n      }\n    } else {\n      setPopup({\n        active: true,\n        title: \"Oops!\",\n        message: data.message\n      });\n    }\n  };\n\n  const onLoginClick = async e => {\n    e.preventDefault();\n    let notEmpty = await validateInputSignUp();\n\n    if (notEmpty) {\n      loginAdmin({\n        username,\n        password\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-admin-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-admin-texts\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo-login-admin-page\",\n        alt: \"This is a logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"logo-text-login-admin-page\",\n        children: \"Food Panda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-admin-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"user-data-label\",\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"user-data-input\",\n          type: \"text\",\n          placeholder: \"Your username\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"user-data-label\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"user-data-input\",\n          type: \"password\",\n          placeholder: \"Your password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        id: \"btn-login-admin\",\n        type: \"submit\",\n        onClick: e => onLoginClick(e),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: popup.active,\n      setPopup: setPopup,\n      title: popup.title,\n      message: popup.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LogInAdminPage, \"1NKWljDi0zmDgF3Su1dT2mIbNTA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LogInAdminPage;\nexport default LogInAdminPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogInAdminPage\");","map":{"version":3,"sources":["D:/facultate/an 3/sem 2 - UPM/SD - UTCN/assignments/assignment2/foodpanda_frontend/src/components/LogInAdminPage.js"],"names":["useNavigate","useState","Popup","LogInAdminPage","username","setUsername","password","setPassword","popup","setPopup","active","title","message","navigate","validateInputSignUp","loginAdmin","admin","response","fetch","method","headers","body","JSON","stringify","data","json","success","console","log","receivedAdmin","adminData","restaurantName","receivedZones","zonesData","state","zones","onLoginClick","e","preventDefault","notEmpty","target","value"],"mappings":"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","sourcesContent":["import { useNavigate } from \"react-router-dom\"\r\nimport { useState } from \"react\";\r\nimport \"./../css/LogInAdminPage.css\"; \r\nimport Popup from \"./Popup\";\r\n\r\nconst LogInAdminPage = () => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [popup, setPopup] = useState({active: false, title: \"\", message: \"\"});\r\n    const navigate = useNavigate()\r\n    \r\n    const validateInputSignUp = async () => {\r\n        if(!username) {\r\n            setPopup({active: true, title: \"Oops!\", \r\n                message: \"Username can't be empty\"})\r\n            return false\r\n        }\r\n        if(!password) {\r\n            setPopup({active: true, title: \"Oops!\", \r\n                message: \"Password can't be empty\"})\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const loginAdmin = async(admin) => {\r\n        const response = await fetch(`http://localhost:8080/foodpanda/admin`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(admin)\r\n        })\r\n        const data = await response.json()\r\n        \r\n        if(data.success === true) {\r\n            console.log(username)\r\n            const receivedAdmin = await fetch(`http://localhost:8080/foodpanda/admins/${username}`)\r\n            const adminData = await receivedAdmin.json()\r\n\r\n            if (adminData.restaurantName === \"\") {\r\n                const receivedZones = await fetch(`http://localhost:8080/foodpanda/zones`)\r\n                const zonesData = await receivedZones.json()\r\n                navigate('/admin/restaurant', {\r\n                    state: {admin: adminData, zones:zonesData}\r\n                })\r\n            } \r\n            else {\r\n                navigate('/admin/main-page', {\r\n                    state: {admin: adminData}\r\n                })\r\n            }       \r\n        }\r\n        else {\r\n            setPopup({active: true, title: \"Oops!\", \r\n                    message: data.message})\r\n        }\r\n    }\r\n\r\n    const onLoginClick = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        let notEmpty = await validateInputSignUp()\r\n        if (notEmpty){\r\n            loginAdmin({username, password})\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='login-admin-page'>\r\n            <div className='login-admin-texts'>\r\n                <img className='logo-login-admin-page' alt='This is a logo'/>\r\n                <p className='logo-text-login-admin-page'>Food Panda</p>\r\n                {/* <p className='motto'>Learning as easy as i = 0;</p> */}\r\n            </div>\r\n\r\n            <form className=\"login-admin-form\">\r\n                <div className=\"user-data\">\r\n                    <label className=\"user-data-label\">Username:</label>\r\n                    <input\r\n                        className=\"user-data-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Your username\"\r\n                        value={username} \r\n                        onChange={(e) => setUsername(e.target.value)} \r\n                    />\r\n                </div>\r\n                <div className=\"user-data\">\r\n                    <label className=\"user-data-label\">Password:</label>\r\n                    <input\r\n                    className=\"user-data-input\" \r\n                        type=\"password\" \r\n                        placeholder=\"Your password\"\r\n                        value={password} \r\n                        onChange={(e) => setPassword(e.target.value)} \r\n                    />\r\n                </div>\r\n                \r\n                <button \r\n                    className='btn' \r\n                    id='btn-login-admin' \r\n                    type='submit'\r\n                    onClick={(e) => onLoginClick(e)}\r\n                >\r\n                    Login        \r\n                </button>  \r\n            </form>\r\n\r\n            <Popup \r\n                trigger={popup.active}\r\n                setPopup={setPopup}\r\n                title={popup.title}\r\n                message={popup.message}\r\n            />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LogInAdminPage"]},"metadata":{},"sourceType":"module"}